// Code generated by "enumer -type=OpType -trimprefix=OpType gen_op_types.go"; DO NOT EDIT.

package backends

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidParameterConstantIdentityReduceWindowRngBitGeneratorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountAbsAddArgMinMaxBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimCeilClzComplexConcatenateConjConvGeneralDilatedConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderImagIotaIsFiniteLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumRemReshapeReverseRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhereLast"

var _OpTypeIndex = [...]uint16{0, 7, 16, 24, 32, 44, 59, 80, 100, 117, 125, 128, 131, 140, 147, 157, 167, 176, 186, 195, 209, 213, 216, 223, 234, 238, 256, 268, 271, 274, 277, 287, 299, 317, 322, 337, 340, 343, 348, 351, 356, 362, 376, 400, 411, 432, 436, 440, 448, 459, 480, 488, 506, 509, 514, 524, 534, 543, 553, 561, 564, 567, 570, 573, 581, 599, 602, 605, 609, 625, 640, 656, 672, 687, 703, 712, 721, 734, 743, 746, 753, 760, 765, 770, 780, 790, 800, 819, 838, 857, 866, 886, 903, 907, 910, 915, 919, 922, 926, 935, 940, 944}

const _OpTypeLowerName = "invalidparameterconstantidentityreducewindowrngbitgeneratorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountabsaddargminmaxbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimceilclzcomplexconcatenateconjconvgeneraldilatedconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderimagiotaisfinitelessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumremreshapereverseroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewherelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[OpTypeInvalid-(0)]
	_ = x[OpTypeParameter-(1)]
	_ = x[OpTypeConstant-(2)]
	_ = x[OpTypeIdentity-(3)]
	_ = x[OpTypeReduceWindow-(4)]
	_ = x[OpTypeRngBitGenerator-(5)]
	_ = x[OpTypeBatchNormForInference-(6)]
	_ = x[OpTypeBatchNormForTraining-(7)]
	_ = x[OpTypeBatchNormGradient-(8)]
	_ = x[OpTypeBitCount-(9)]
	_ = x[OpTypeAbs-(10)]
	_ = x[OpTypeAdd-(11)]
	_ = x[OpTypeArgMinMax-(12)]
	_ = x[OpTypeBitcast-(13)]
	_ = x[OpTypeBitwiseAnd-(14)]
	_ = x[OpTypeBitwiseNot-(15)]
	_ = x[OpTypeBitwiseOr-(16)]
	_ = x[OpTypeBitwiseXor-(17)]
	_ = x[OpTypeBroadcast-(18)]
	_ = x[OpTypeBroadcastInDim-(19)]
	_ = x[OpTypeCeil-(20)]
	_ = x[OpTypeClz-(21)]
	_ = x[OpTypeComplex-(22)]
	_ = x[OpTypeConcatenate-(23)]
	_ = x[OpTypeConj-(24)]
	_ = x[OpTypeConvGeneralDilated-(25)]
	_ = x[OpTypeConvertDType-(26)]
	_ = x[OpTypeCos-(27)]
	_ = x[OpTypeDiv-(28)]
	_ = x[OpTypeDot-(29)]
	_ = x[OpTypeDotGeneral-(30)]
	_ = x[OpTypeDynamicSlice-(31)]
	_ = x[OpTypeDynamicUpdateSlice-(32)]
	_ = x[OpTypeEqual-(33)]
	_ = x[OpTypeEqualTotalOrder-(34)]
	_ = x[OpTypeErf-(35)]
	_ = x[OpTypeExp-(36)]
	_ = x[OpTypeExpm1-(37)]
	_ = x[OpTypeFFT-(38)]
	_ = x[OpTypeFloor-(39)]
	_ = x[OpTypeGather-(40)]
	_ = x[OpTypeGreaterOrEqual-(41)]
	_ = x[OpTypeGreaterOrEqualTotalOrder-(42)]
	_ = x[OpTypeGreaterThan-(43)]
	_ = x[OpTypeGreaterThanTotalOrder-(44)]
	_ = x[OpTypeImag-(45)]
	_ = x[OpTypeIota-(46)]
	_ = x[OpTypeIsFinite-(47)]
	_ = x[OpTypeLessOrEqual-(48)]
	_ = x[OpTypeLessOrEqualTotalOrder-(49)]
	_ = x[OpTypeLessThan-(50)]
	_ = x[OpTypeLessThanTotalOrder-(51)]
	_ = x[OpTypeLog-(52)]
	_ = x[OpTypeLog1p-(53)]
	_ = x[OpTypeLogicalAnd-(54)]
	_ = x[OpTypeLogicalNot-(55)]
	_ = x[OpTypeLogicalOr-(56)]
	_ = x[OpTypeLogicalXor-(57)]
	_ = x[OpTypeLogistic-(58)]
	_ = x[OpTypeMax-(59)]
	_ = x[OpTypeMin-(60)]
	_ = x[OpTypeMul-(61)]
	_ = x[OpTypeNeg-(62)]
	_ = x[OpTypeNotEqual-(63)]
	_ = x[OpTypeNotEqualTotalOrder-(64)]
	_ = x[OpTypePad-(65)]
	_ = x[OpTypePow-(66)]
	_ = x[OpTypeReal-(67)]
	_ = x[OpTypeReduceBitwiseAnd-(68)]
	_ = x[OpTypeReduceBitwiseOr-(69)]
	_ = x[OpTypeReduceBitwiseXor-(70)]
	_ = x[OpTypeReduceLogicalAnd-(71)]
	_ = x[OpTypeReduceLogicalOr-(72)]
	_ = x[OpTypeReduceLogicalXor-(73)]
	_ = x[OpTypeReduceMax-(74)]
	_ = x[OpTypeReduceMin-(75)]
	_ = x[OpTypeReduceProduct-(76)]
	_ = x[OpTypeReduceSum-(77)]
	_ = x[OpTypeRem-(78)]
	_ = x[OpTypeReshape-(79)]
	_ = x[OpTypeReverse-(80)]
	_ = x[OpTypeRound-(81)]
	_ = x[OpTypeRsqrt-(82)]
	_ = x[OpTypeScatterMax-(83)]
	_ = x[OpTypeScatterMin-(84)]
	_ = x[OpTypeScatterSum-(85)]
	_ = x[OpTypeSelectAndScatterMax-(86)]
	_ = x[OpTypeSelectAndScatterMin-(87)]
	_ = x[OpTypeSelectAndScatterSum-(88)]
	_ = x[OpTypeShiftLeft-(89)]
	_ = x[OpTypeShiftRightArithmetic-(90)]
	_ = x[OpTypeShiftRightLogical-(91)]
	_ = x[OpTypeSign-(92)]
	_ = x[OpTypeSin-(93)]
	_ = x[OpTypeSlice-(94)]
	_ = x[OpTypeSqrt-(95)]
	_ = x[OpTypeSub-(96)]
	_ = x[OpTypeTanh-(97)]
	_ = x[OpTypeTranspose-(98)]
	_ = x[OpTypeWhere-(99)]
	_ = x[OpTypeLast-(100)]
}

var _OpTypeValues = []OpType{OpTypeInvalid, OpTypeParameter, OpTypeConstant, OpTypeIdentity, OpTypeReduceWindow, OpTypeRngBitGenerator, OpTypeBatchNormForInference, OpTypeBatchNormForTraining, OpTypeBatchNormGradient, OpTypeBitCount, OpTypeAbs, OpTypeAdd, OpTypeArgMinMax, OpTypeBitcast, OpTypeBitwiseAnd, OpTypeBitwiseNot, OpTypeBitwiseOr, OpTypeBitwiseXor, OpTypeBroadcast, OpTypeBroadcastInDim, OpTypeCeil, OpTypeClz, OpTypeComplex, OpTypeConcatenate, OpTypeConj, OpTypeConvGeneralDilated, OpTypeConvertDType, OpTypeCos, OpTypeDiv, OpTypeDot, OpTypeDotGeneral, OpTypeDynamicSlice, OpTypeDynamicUpdateSlice, OpTypeEqual, OpTypeEqualTotalOrder, OpTypeErf, OpTypeExp, OpTypeExpm1, OpTypeFFT, OpTypeFloor, OpTypeGather, OpTypeGreaterOrEqual, OpTypeGreaterOrEqualTotalOrder, OpTypeGreaterThan, OpTypeGreaterThanTotalOrder, OpTypeImag, OpTypeIota, OpTypeIsFinite, OpTypeLessOrEqual, OpTypeLessOrEqualTotalOrder, OpTypeLessThan, OpTypeLessThanTotalOrder, OpTypeLog, OpTypeLog1p, OpTypeLogicalAnd, OpTypeLogicalNot, OpTypeLogicalOr, OpTypeLogicalXor, OpTypeLogistic, OpTypeMax, OpTypeMin, OpTypeMul, OpTypeNeg, OpTypeNotEqual, OpTypeNotEqualTotalOrder, OpTypePad, OpTypePow, OpTypeReal, OpTypeReduceBitwiseAnd, OpTypeReduceBitwiseOr, OpTypeReduceBitwiseXor, OpTypeReduceLogicalAnd, OpTypeReduceLogicalOr, OpTypeReduceLogicalXor, OpTypeReduceMax, OpTypeReduceMin, OpTypeReduceProduct, OpTypeReduceSum, OpTypeRem, OpTypeReshape, OpTypeReverse, OpTypeRound, OpTypeRsqrt, OpTypeScatterMax, OpTypeScatterMin, OpTypeScatterSum, OpTypeSelectAndScatterMax, OpTypeSelectAndScatterMin, OpTypeSelectAndScatterSum, OpTypeShiftLeft, OpTypeShiftRightArithmetic, OpTypeShiftRightLogical, OpTypeSign, OpTypeSin, OpTypeSlice, OpTypeSqrt, OpTypeSub, OpTypeTanh, OpTypeTranspose, OpTypeWhere, OpTypeLast}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          OpTypeInvalid,
	_OpTypeLowerName[0:7]:     OpTypeInvalid,
	_OpTypeName[7:16]:         OpTypeParameter,
	_OpTypeLowerName[7:16]:    OpTypeParameter,
	_OpTypeName[16:24]:        OpTypeConstant,
	_OpTypeLowerName[16:24]:   OpTypeConstant,
	_OpTypeName[24:32]:        OpTypeIdentity,
	_OpTypeLowerName[24:32]:   OpTypeIdentity,
	_OpTypeName[32:44]:        OpTypeReduceWindow,
	_OpTypeLowerName[32:44]:   OpTypeReduceWindow,
	_OpTypeName[44:59]:        OpTypeRngBitGenerator,
	_OpTypeLowerName[44:59]:   OpTypeRngBitGenerator,
	_OpTypeName[59:80]:        OpTypeBatchNormForInference,
	_OpTypeLowerName[59:80]:   OpTypeBatchNormForInference,
	_OpTypeName[80:100]:       OpTypeBatchNormForTraining,
	_OpTypeLowerName[80:100]:  OpTypeBatchNormForTraining,
	_OpTypeName[100:117]:      OpTypeBatchNormGradient,
	_OpTypeLowerName[100:117]: OpTypeBatchNormGradient,
	_OpTypeName[117:125]:      OpTypeBitCount,
	_OpTypeLowerName[117:125]: OpTypeBitCount,
	_OpTypeName[125:128]:      OpTypeAbs,
	_OpTypeLowerName[125:128]: OpTypeAbs,
	_OpTypeName[128:131]:      OpTypeAdd,
	_OpTypeLowerName[128:131]: OpTypeAdd,
	_OpTypeName[131:140]:      OpTypeArgMinMax,
	_OpTypeLowerName[131:140]: OpTypeArgMinMax,
	_OpTypeName[140:147]:      OpTypeBitcast,
	_OpTypeLowerName[140:147]: OpTypeBitcast,
	_OpTypeName[147:157]:      OpTypeBitwiseAnd,
	_OpTypeLowerName[147:157]: OpTypeBitwiseAnd,
	_OpTypeName[157:167]:      OpTypeBitwiseNot,
	_OpTypeLowerName[157:167]: OpTypeBitwiseNot,
	_OpTypeName[167:176]:      OpTypeBitwiseOr,
	_OpTypeLowerName[167:176]: OpTypeBitwiseOr,
	_OpTypeName[176:186]:      OpTypeBitwiseXor,
	_OpTypeLowerName[176:186]: OpTypeBitwiseXor,
	_OpTypeName[186:195]:      OpTypeBroadcast,
	_OpTypeLowerName[186:195]: OpTypeBroadcast,
	_OpTypeName[195:209]:      OpTypeBroadcastInDim,
	_OpTypeLowerName[195:209]: OpTypeBroadcastInDim,
	_OpTypeName[209:213]:      OpTypeCeil,
	_OpTypeLowerName[209:213]: OpTypeCeil,
	_OpTypeName[213:216]:      OpTypeClz,
	_OpTypeLowerName[213:216]: OpTypeClz,
	_OpTypeName[216:223]:      OpTypeComplex,
	_OpTypeLowerName[216:223]: OpTypeComplex,
	_OpTypeName[223:234]:      OpTypeConcatenate,
	_OpTypeLowerName[223:234]: OpTypeConcatenate,
	_OpTypeName[234:238]:      OpTypeConj,
	_OpTypeLowerName[234:238]: OpTypeConj,
	_OpTypeName[238:256]:      OpTypeConvGeneralDilated,
	_OpTypeLowerName[238:256]: OpTypeConvGeneralDilated,
	_OpTypeName[256:268]:      OpTypeConvertDType,
	_OpTypeLowerName[256:268]: OpTypeConvertDType,
	_OpTypeName[268:271]:      OpTypeCos,
	_OpTypeLowerName[268:271]: OpTypeCos,
	_OpTypeName[271:274]:      OpTypeDiv,
	_OpTypeLowerName[271:274]: OpTypeDiv,
	_OpTypeName[274:277]:      OpTypeDot,
	_OpTypeLowerName[274:277]: OpTypeDot,
	_OpTypeName[277:287]:      OpTypeDotGeneral,
	_OpTypeLowerName[277:287]: OpTypeDotGeneral,
	_OpTypeName[287:299]:      OpTypeDynamicSlice,
	_OpTypeLowerName[287:299]: OpTypeDynamicSlice,
	_OpTypeName[299:317]:      OpTypeDynamicUpdateSlice,
	_OpTypeLowerName[299:317]: OpTypeDynamicUpdateSlice,
	_OpTypeName[317:322]:      OpTypeEqual,
	_OpTypeLowerName[317:322]: OpTypeEqual,
	_OpTypeName[322:337]:      OpTypeEqualTotalOrder,
	_OpTypeLowerName[322:337]: OpTypeEqualTotalOrder,
	_OpTypeName[337:340]:      OpTypeErf,
	_OpTypeLowerName[337:340]: OpTypeErf,
	_OpTypeName[340:343]:      OpTypeExp,
	_OpTypeLowerName[340:343]: OpTypeExp,
	_OpTypeName[343:348]:      OpTypeExpm1,
	_OpTypeLowerName[343:348]: OpTypeExpm1,
	_OpTypeName[348:351]:      OpTypeFFT,
	_OpTypeLowerName[348:351]: OpTypeFFT,
	_OpTypeName[351:356]:      OpTypeFloor,
	_OpTypeLowerName[351:356]: OpTypeFloor,
	_OpTypeName[356:362]:      OpTypeGather,
	_OpTypeLowerName[356:362]: OpTypeGather,
	_OpTypeName[362:376]:      OpTypeGreaterOrEqual,
	_OpTypeLowerName[362:376]: OpTypeGreaterOrEqual,
	_OpTypeName[376:400]:      OpTypeGreaterOrEqualTotalOrder,
	_OpTypeLowerName[376:400]: OpTypeGreaterOrEqualTotalOrder,
	_OpTypeName[400:411]:      OpTypeGreaterThan,
	_OpTypeLowerName[400:411]: OpTypeGreaterThan,
	_OpTypeName[411:432]:      OpTypeGreaterThanTotalOrder,
	_OpTypeLowerName[411:432]: OpTypeGreaterThanTotalOrder,
	_OpTypeName[432:436]:      OpTypeImag,
	_OpTypeLowerName[432:436]: OpTypeImag,
	_OpTypeName[436:440]:      OpTypeIota,
	_OpTypeLowerName[436:440]: OpTypeIota,
	_OpTypeName[440:448]:      OpTypeIsFinite,
	_OpTypeLowerName[440:448]: OpTypeIsFinite,
	_OpTypeName[448:459]:      OpTypeLessOrEqual,
	_OpTypeLowerName[448:459]: OpTypeLessOrEqual,
	_OpTypeName[459:480]:      OpTypeLessOrEqualTotalOrder,
	_OpTypeLowerName[459:480]: OpTypeLessOrEqualTotalOrder,
	_OpTypeName[480:488]:      OpTypeLessThan,
	_OpTypeLowerName[480:488]: OpTypeLessThan,
	_OpTypeName[488:506]:      OpTypeLessThanTotalOrder,
	_OpTypeLowerName[488:506]: OpTypeLessThanTotalOrder,
	_OpTypeName[506:509]:      OpTypeLog,
	_OpTypeLowerName[506:509]: OpTypeLog,
	_OpTypeName[509:514]:      OpTypeLog1p,
	_OpTypeLowerName[509:514]: OpTypeLog1p,
	_OpTypeName[514:524]:      OpTypeLogicalAnd,
	_OpTypeLowerName[514:524]: OpTypeLogicalAnd,
	_OpTypeName[524:534]:      OpTypeLogicalNot,
	_OpTypeLowerName[524:534]: OpTypeLogicalNot,
	_OpTypeName[534:543]:      OpTypeLogicalOr,
	_OpTypeLowerName[534:543]: OpTypeLogicalOr,
	_OpTypeName[543:553]:      OpTypeLogicalXor,
	_OpTypeLowerName[543:553]: OpTypeLogicalXor,
	_OpTypeName[553:561]:      OpTypeLogistic,
	_OpTypeLowerName[553:561]: OpTypeLogistic,
	_OpTypeName[561:564]:      OpTypeMax,
	_OpTypeLowerName[561:564]: OpTypeMax,
	_OpTypeName[564:567]:      OpTypeMin,
	_OpTypeLowerName[564:567]: OpTypeMin,
	_OpTypeName[567:570]:      OpTypeMul,
	_OpTypeLowerName[567:570]: OpTypeMul,
	_OpTypeName[570:573]:      OpTypeNeg,
	_OpTypeLowerName[570:573]: OpTypeNeg,
	_OpTypeName[573:581]:      OpTypeNotEqual,
	_OpTypeLowerName[573:581]: OpTypeNotEqual,
	_OpTypeName[581:599]:      OpTypeNotEqualTotalOrder,
	_OpTypeLowerName[581:599]: OpTypeNotEqualTotalOrder,
	_OpTypeName[599:602]:      OpTypePad,
	_OpTypeLowerName[599:602]: OpTypePad,
	_OpTypeName[602:605]:      OpTypePow,
	_OpTypeLowerName[602:605]: OpTypePow,
	_OpTypeName[605:609]:      OpTypeReal,
	_OpTypeLowerName[605:609]: OpTypeReal,
	_OpTypeName[609:625]:      OpTypeReduceBitwiseAnd,
	_OpTypeLowerName[609:625]: OpTypeReduceBitwiseAnd,
	_OpTypeName[625:640]:      OpTypeReduceBitwiseOr,
	_OpTypeLowerName[625:640]: OpTypeReduceBitwiseOr,
	_OpTypeName[640:656]:      OpTypeReduceBitwiseXor,
	_OpTypeLowerName[640:656]: OpTypeReduceBitwiseXor,
	_OpTypeName[656:672]:      OpTypeReduceLogicalAnd,
	_OpTypeLowerName[656:672]: OpTypeReduceLogicalAnd,
	_OpTypeName[672:687]:      OpTypeReduceLogicalOr,
	_OpTypeLowerName[672:687]: OpTypeReduceLogicalOr,
	_OpTypeName[687:703]:      OpTypeReduceLogicalXor,
	_OpTypeLowerName[687:703]: OpTypeReduceLogicalXor,
	_OpTypeName[703:712]:      OpTypeReduceMax,
	_OpTypeLowerName[703:712]: OpTypeReduceMax,
	_OpTypeName[712:721]:      OpTypeReduceMin,
	_OpTypeLowerName[712:721]: OpTypeReduceMin,
	_OpTypeName[721:734]:      OpTypeReduceProduct,
	_OpTypeLowerName[721:734]: OpTypeReduceProduct,
	_OpTypeName[734:743]:      OpTypeReduceSum,
	_OpTypeLowerName[734:743]: OpTypeReduceSum,
	_OpTypeName[743:746]:      OpTypeRem,
	_OpTypeLowerName[743:746]: OpTypeRem,
	_OpTypeName[746:753]:      OpTypeReshape,
	_OpTypeLowerName[746:753]: OpTypeReshape,
	_OpTypeName[753:760]:      OpTypeReverse,
	_OpTypeLowerName[753:760]: OpTypeReverse,
	_OpTypeName[760:765]:      OpTypeRound,
	_OpTypeLowerName[760:765]: OpTypeRound,
	_OpTypeName[765:770]:      OpTypeRsqrt,
	_OpTypeLowerName[765:770]: OpTypeRsqrt,
	_OpTypeName[770:780]:      OpTypeScatterMax,
	_OpTypeLowerName[770:780]: OpTypeScatterMax,
	_OpTypeName[780:790]:      OpTypeScatterMin,
	_OpTypeLowerName[780:790]: OpTypeScatterMin,
	_OpTypeName[790:800]:      OpTypeScatterSum,
	_OpTypeLowerName[790:800]: OpTypeScatterSum,
	_OpTypeName[800:819]:      OpTypeSelectAndScatterMax,
	_OpTypeLowerName[800:819]: OpTypeSelectAndScatterMax,
	_OpTypeName[819:838]:      OpTypeSelectAndScatterMin,
	_OpTypeLowerName[819:838]: OpTypeSelectAndScatterMin,
	_OpTypeName[838:857]:      OpTypeSelectAndScatterSum,
	_OpTypeLowerName[838:857]: OpTypeSelectAndScatterSum,
	_OpTypeName[857:866]:      OpTypeShiftLeft,
	_OpTypeLowerName[857:866]: OpTypeShiftLeft,
	_OpTypeName[866:886]:      OpTypeShiftRightArithmetic,
	_OpTypeLowerName[866:886]: OpTypeShiftRightArithmetic,
	_OpTypeName[886:903]:      OpTypeShiftRightLogical,
	_OpTypeLowerName[886:903]: OpTypeShiftRightLogical,
	_OpTypeName[903:907]:      OpTypeSign,
	_OpTypeLowerName[903:907]: OpTypeSign,
	_OpTypeName[907:910]:      OpTypeSin,
	_OpTypeLowerName[907:910]: OpTypeSin,
	_OpTypeName[910:915]:      OpTypeSlice,
	_OpTypeLowerName[910:915]: OpTypeSlice,
	_OpTypeName[915:919]:      OpTypeSqrt,
	_OpTypeLowerName[915:919]: OpTypeSqrt,
	_OpTypeName[919:922]:      OpTypeSub,
	_OpTypeLowerName[919:922]: OpTypeSub,
	_OpTypeName[922:926]:      OpTypeTanh,
	_OpTypeLowerName[922:926]: OpTypeTanh,
	_OpTypeName[926:935]:      OpTypeTranspose,
	_OpTypeLowerName[926:935]: OpTypeTranspose,
	_OpTypeName[935:940]:      OpTypeWhere,
	_OpTypeLowerName[935:940]: OpTypeWhere,
	_OpTypeName[940:944]:      OpTypeLast,
	_OpTypeLowerName[940:944]: OpTypeLast,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:16],
	_OpTypeName[16:24],
	_OpTypeName[24:32],
	_OpTypeName[32:44],
	_OpTypeName[44:59],
	_OpTypeName[59:80],
	_OpTypeName[80:100],
	_OpTypeName[100:117],
	_OpTypeName[117:125],
	_OpTypeName[125:128],
	_OpTypeName[128:131],
	_OpTypeName[131:140],
	_OpTypeName[140:147],
	_OpTypeName[147:157],
	_OpTypeName[157:167],
	_OpTypeName[167:176],
	_OpTypeName[176:186],
	_OpTypeName[186:195],
	_OpTypeName[195:209],
	_OpTypeName[209:213],
	_OpTypeName[213:216],
	_OpTypeName[216:223],
	_OpTypeName[223:234],
	_OpTypeName[234:238],
	_OpTypeName[238:256],
	_OpTypeName[256:268],
	_OpTypeName[268:271],
	_OpTypeName[271:274],
	_OpTypeName[274:277],
	_OpTypeName[277:287],
	_OpTypeName[287:299],
	_OpTypeName[299:317],
	_OpTypeName[317:322],
	_OpTypeName[322:337],
	_OpTypeName[337:340],
	_OpTypeName[340:343],
	_OpTypeName[343:348],
	_OpTypeName[348:351],
	_OpTypeName[351:356],
	_OpTypeName[356:362],
	_OpTypeName[362:376],
	_OpTypeName[376:400],
	_OpTypeName[400:411],
	_OpTypeName[411:432],
	_OpTypeName[432:436],
	_OpTypeName[436:440],
	_OpTypeName[440:448],
	_OpTypeName[448:459],
	_OpTypeName[459:480],
	_OpTypeName[480:488],
	_OpTypeName[488:506],
	_OpTypeName[506:509],
	_OpTypeName[509:514],
	_OpTypeName[514:524],
	_OpTypeName[524:534],
	_OpTypeName[534:543],
	_OpTypeName[543:553],
	_OpTypeName[553:561],
	_OpTypeName[561:564],
	_OpTypeName[564:567],
	_OpTypeName[567:570],
	_OpTypeName[570:573],
	_OpTypeName[573:581],
	_OpTypeName[581:599],
	_OpTypeName[599:602],
	_OpTypeName[602:605],
	_OpTypeName[605:609],
	_OpTypeName[609:625],
	_OpTypeName[625:640],
	_OpTypeName[640:656],
	_OpTypeName[656:672],
	_OpTypeName[672:687],
	_OpTypeName[687:703],
	_OpTypeName[703:712],
	_OpTypeName[712:721],
	_OpTypeName[721:734],
	_OpTypeName[734:743],
	_OpTypeName[743:746],
	_OpTypeName[746:753],
	_OpTypeName[753:760],
	_OpTypeName[760:765],
	_OpTypeName[765:770],
	_OpTypeName[770:780],
	_OpTypeName[780:790],
	_OpTypeName[790:800],
	_OpTypeName[800:819],
	_OpTypeName[819:838],
	_OpTypeName[838:857],
	_OpTypeName[857:866],
	_OpTypeName[866:886],
	_OpTypeName[886:903],
	_OpTypeName[903:907],
	_OpTypeName[907:910],
	_OpTypeName[910:915],
	_OpTypeName[915:919],
	_OpTypeName[919:922],
	_OpTypeName[922:926],
	_OpTypeName[926:935],
	_OpTypeName[935:940],
	_OpTypeName[940:944],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
