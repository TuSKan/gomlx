// Code generated by "enumer -type=NodeType -trimprefix=NodeType -yaml -json -text -values gen_backend_ops.go"; DO NOT EDIT.

package graph

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeTypeName = "InvalidSplitNodeAbsAddArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimCeilClzComplexConcatenateConjConstantConvGeneralDilatedConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderIdentityImagIotaIsFiniteLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadParameterPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemReshapeReverseRngBitGeneratorRoundRsqrtScatterAddScatterMaxScatterMinSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhere"

var _NodeTypeIndex = [...]uint16{0, 7, 16, 19, 22, 31, 52, 72, 89, 97, 104, 114, 124, 133, 143, 152, 166, 170, 173, 180, 191, 195, 203, 221, 233, 236, 239, 242, 252, 264, 282, 287, 302, 305, 308, 313, 316, 321, 327, 341, 365, 376, 397, 405, 409, 413, 421, 432, 453, 461, 479, 482, 487, 497, 507, 516, 526, 534, 537, 540, 543, 546, 554, 572, 575, 584, 587, 591, 607, 622, 638, 654, 669, 685, 694, 703, 716, 725, 737, 740, 747, 754, 769, 774, 779, 789, 799, 809, 828, 847, 866, 875, 895, 912, 916, 919, 924, 928, 931, 935, 944, 949}

const _NodeTypeLowerName = "invalidsplitnodeabsaddargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimceilclzcomplexconcatenateconjconstantconvgeneraldilatedconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderidentityimagiotaisfinitelessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadparameterpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremreshapereverserngbitgeneratorroundrsqrtscatteraddscattermaxscatterminselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewhere"

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeTypeIndex)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeTypeName[_NodeTypeIndex[i]:_NodeTypeIndex[i+1]]
}

func (NodeType) Values() []string {
	return NodeTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeTypeNoOp() {
	var x [1]struct{}
	_ = x[NodeTypeInvalid-(0)]
	_ = x[NodeTypeSplitNode-(1)]
	_ = x[NodeTypeAbs-(2)]
	_ = x[NodeTypeAdd-(3)]
	_ = x[NodeTypeArgMinMax-(4)]
	_ = x[NodeTypeBatchNormForInference-(5)]
	_ = x[NodeTypeBatchNormForTraining-(6)]
	_ = x[NodeTypeBatchNormGradient-(7)]
	_ = x[NodeTypeBitCount-(8)]
	_ = x[NodeTypeBitcast-(9)]
	_ = x[NodeTypeBitwiseAnd-(10)]
	_ = x[NodeTypeBitwiseNot-(11)]
	_ = x[NodeTypeBitwiseOr-(12)]
	_ = x[NodeTypeBitwiseXor-(13)]
	_ = x[NodeTypeBroadcast-(14)]
	_ = x[NodeTypeBroadcastInDim-(15)]
	_ = x[NodeTypeCeil-(16)]
	_ = x[NodeTypeClz-(17)]
	_ = x[NodeTypeComplex-(18)]
	_ = x[NodeTypeConcatenate-(19)]
	_ = x[NodeTypeConj-(20)]
	_ = x[NodeTypeConstant-(21)]
	_ = x[NodeTypeConvGeneralDilated-(22)]
	_ = x[NodeTypeConvertDType-(23)]
	_ = x[NodeTypeCos-(24)]
	_ = x[NodeTypeDiv-(25)]
	_ = x[NodeTypeDot-(26)]
	_ = x[NodeTypeDotGeneral-(27)]
	_ = x[NodeTypeDynamicSlice-(28)]
	_ = x[NodeTypeDynamicUpdateSlice-(29)]
	_ = x[NodeTypeEqual-(30)]
	_ = x[NodeTypeEqualTotalOrder-(31)]
	_ = x[NodeTypeErf-(32)]
	_ = x[NodeTypeExp-(33)]
	_ = x[NodeTypeExpm1-(34)]
	_ = x[NodeTypeFFT-(35)]
	_ = x[NodeTypeFloor-(36)]
	_ = x[NodeTypeGather-(37)]
	_ = x[NodeTypeGreaterOrEqual-(38)]
	_ = x[NodeTypeGreaterOrEqualTotalOrder-(39)]
	_ = x[NodeTypeGreaterThan-(40)]
	_ = x[NodeTypeGreaterThanTotalOrder-(41)]
	_ = x[NodeTypeIdentity-(42)]
	_ = x[NodeTypeImag-(43)]
	_ = x[NodeTypeIota-(44)]
	_ = x[NodeTypeIsFinite-(45)]
	_ = x[NodeTypeLessOrEqual-(46)]
	_ = x[NodeTypeLessOrEqualTotalOrder-(47)]
	_ = x[NodeTypeLessThan-(48)]
	_ = x[NodeTypeLessThanTotalOrder-(49)]
	_ = x[NodeTypeLog-(50)]
	_ = x[NodeTypeLog1p-(51)]
	_ = x[NodeTypeLogicalAnd-(52)]
	_ = x[NodeTypeLogicalNot-(53)]
	_ = x[NodeTypeLogicalOr-(54)]
	_ = x[NodeTypeLogicalXor-(55)]
	_ = x[NodeTypeLogistic-(56)]
	_ = x[NodeTypeMax-(57)]
	_ = x[NodeTypeMin-(58)]
	_ = x[NodeTypeMul-(59)]
	_ = x[NodeTypeNeg-(60)]
	_ = x[NodeTypeNotEqual-(61)]
	_ = x[NodeTypeNotEqualTotalOrder-(62)]
	_ = x[NodeTypePad-(63)]
	_ = x[NodeTypeParameter-(64)]
	_ = x[NodeTypePow-(65)]
	_ = x[NodeTypeReal-(66)]
	_ = x[NodeTypeReduceBitwiseAnd-(67)]
	_ = x[NodeTypeReduceBitwiseOr-(68)]
	_ = x[NodeTypeReduceBitwiseXor-(69)]
	_ = x[NodeTypeReduceLogicalAnd-(70)]
	_ = x[NodeTypeReduceLogicalOr-(71)]
	_ = x[NodeTypeReduceLogicalXor-(72)]
	_ = x[NodeTypeReduceMax-(73)]
	_ = x[NodeTypeReduceMin-(74)]
	_ = x[NodeTypeReduceProduct-(75)]
	_ = x[NodeTypeReduceSum-(76)]
	_ = x[NodeTypeReduceWindow-(77)]
	_ = x[NodeTypeRem-(78)]
	_ = x[NodeTypeReshape-(79)]
	_ = x[NodeTypeReverse-(80)]
	_ = x[NodeTypeRngBitGenerator-(81)]
	_ = x[NodeTypeRound-(82)]
	_ = x[NodeTypeRsqrt-(83)]
	_ = x[NodeTypeScatterAdd-(84)]
	_ = x[NodeTypeScatterMax-(85)]
	_ = x[NodeTypeScatterMin-(86)]
	_ = x[NodeTypeSelectAndScatterMax-(87)]
	_ = x[NodeTypeSelectAndScatterMin-(88)]
	_ = x[NodeTypeSelectAndScatterSum-(89)]
	_ = x[NodeTypeShiftLeft-(90)]
	_ = x[NodeTypeShiftRightArithmetic-(91)]
	_ = x[NodeTypeShiftRightLogical-(92)]
	_ = x[NodeTypeSign-(93)]
	_ = x[NodeTypeSin-(94)]
	_ = x[NodeTypeSlice-(95)]
	_ = x[NodeTypeSqrt-(96)]
	_ = x[NodeTypeSub-(97)]
	_ = x[NodeTypeTanh-(98)]
	_ = x[NodeTypeTranspose-(99)]
	_ = x[NodeTypeWhere-(100)]
}

var _NodeTypeValues = []NodeType{NodeTypeInvalid, NodeTypeSplitNode, NodeTypeAbs, NodeTypeAdd, NodeTypeArgMinMax, NodeTypeBatchNormForInference, NodeTypeBatchNormForTraining, NodeTypeBatchNormGradient, NodeTypeBitCount, NodeTypeBitcast, NodeTypeBitwiseAnd, NodeTypeBitwiseNot, NodeTypeBitwiseOr, NodeTypeBitwiseXor, NodeTypeBroadcast, NodeTypeBroadcastInDim, NodeTypeCeil, NodeTypeClz, NodeTypeComplex, NodeTypeConcatenate, NodeTypeConj, NodeTypeConstant, NodeTypeConvGeneralDilated, NodeTypeConvertDType, NodeTypeCos, NodeTypeDiv, NodeTypeDot, NodeTypeDotGeneral, NodeTypeDynamicSlice, NodeTypeDynamicUpdateSlice, NodeTypeEqual, NodeTypeEqualTotalOrder, NodeTypeErf, NodeTypeExp, NodeTypeExpm1, NodeTypeFFT, NodeTypeFloor, NodeTypeGather, NodeTypeGreaterOrEqual, NodeTypeGreaterOrEqualTotalOrder, NodeTypeGreaterThan, NodeTypeGreaterThanTotalOrder, NodeTypeIdentity, NodeTypeImag, NodeTypeIota, NodeTypeIsFinite, NodeTypeLessOrEqual, NodeTypeLessOrEqualTotalOrder, NodeTypeLessThan, NodeTypeLessThanTotalOrder, NodeTypeLog, NodeTypeLog1p, NodeTypeLogicalAnd, NodeTypeLogicalNot, NodeTypeLogicalOr, NodeTypeLogicalXor, NodeTypeLogistic, NodeTypeMax, NodeTypeMin, NodeTypeMul, NodeTypeNeg, NodeTypeNotEqual, NodeTypeNotEqualTotalOrder, NodeTypePad, NodeTypeParameter, NodeTypePow, NodeTypeReal, NodeTypeReduceBitwiseAnd, NodeTypeReduceBitwiseOr, NodeTypeReduceBitwiseXor, NodeTypeReduceLogicalAnd, NodeTypeReduceLogicalOr, NodeTypeReduceLogicalXor, NodeTypeReduceMax, NodeTypeReduceMin, NodeTypeReduceProduct, NodeTypeReduceSum, NodeTypeReduceWindow, NodeTypeRem, NodeTypeReshape, NodeTypeReverse, NodeTypeRngBitGenerator, NodeTypeRound, NodeTypeRsqrt, NodeTypeScatterAdd, NodeTypeScatterMax, NodeTypeScatterMin, NodeTypeSelectAndScatterMax, NodeTypeSelectAndScatterMin, NodeTypeSelectAndScatterSum, NodeTypeShiftLeft, NodeTypeShiftRightArithmetic, NodeTypeShiftRightLogical, NodeTypeSign, NodeTypeSin, NodeTypeSlice, NodeTypeSqrt, NodeTypeSub, NodeTypeTanh, NodeTypeTranspose, NodeTypeWhere}

var _NodeTypeNameToValueMap = map[string]NodeType{
	_NodeTypeName[0:7]:          NodeTypeInvalid,
	_NodeTypeLowerName[0:7]:     NodeTypeInvalid,
	_NodeTypeName[7:16]:         NodeTypeSplitNode,
	_NodeTypeLowerName[7:16]:    NodeTypeSplitNode,
	_NodeTypeName[16:19]:        NodeTypeAbs,
	_NodeTypeLowerName[16:19]:   NodeTypeAbs,
	_NodeTypeName[19:22]:        NodeTypeAdd,
	_NodeTypeLowerName[19:22]:   NodeTypeAdd,
	_NodeTypeName[22:31]:        NodeTypeArgMinMax,
	_NodeTypeLowerName[22:31]:   NodeTypeArgMinMax,
	_NodeTypeName[31:52]:        NodeTypeBatchNormForInference,
	_NodeTypeLowerName[31:52]:   NodeTypeBatchNormForInference,
	_NodeTypeName[52:72]:        NodeTypeBatchNormForTraining,
	_NodeTypeLowerName[52:72]:   NodeTypeBatchNormForTraining,
	_NodeTypeName[72:89]:        NodeTypeBatchNormGradient,
	_NodeTypeLowerName[72:89]:   NodeTypeBatchNormGradient,
	_NodeTypeName[89:97]:        NodeTypeBitCount,
	_NodeTypeLowerName[89:97]:   NodeTypeBitCount,
	_NodeTypeName[97:104]:       NodeTypeBitcast,
	_NodeTypeLowerName[97:104]:  NodeTypeBitcast,
	_NodeTypeName[104:114]:      NodeTypeBitwiseAnd,
	_NodeTypeLowerName[104:114]: NodeTypeBitwiseAnd,
	_NodeTypeName[114:124]:      NodeTypeBitwiseNot,
	_NodeTypeLowerName[114:124]: NodeTypeBitwiseNot,
	_NodeTypeName[124:133]:      NodeTypeBitwiseOr,
	_NodeTypeLowerName[124:133]: NodeTypeBitwiseOr,
	_NodeTypeName[133:143]:      NodeTypeBitwiseXor,
	_NodeTypeLowerName[133:143]: NodeTypeBitwiseXor,
	_NodeTypeName[143:152]:      NodeTypeBroadcast,
	_NodeTypeLowerName[143:152]: NodeTypeBroadcast,
	_NodeTypeName[152:166]:      NodeTypeBroadcastInDim,
	_NodeTypeLowerName[152:166]: NodeTypeBroadcastInDim,
	_NodeTypeName[166:170]:      NodeTypeCeil,
	_NodeTypeLowerName[166:170]: NodeTypeCeil,
	_NodeTypeName[170:173]:      NodeTypeClz,
	_NodeTypeLowerName[170:173]: NodeTypeClz,
	_NodeTypeName[173:180]:      NodeTypeComplex,
	_NodeTypeLowerName[173:180]: NodeTypeComplex,
	_NodeTypeName[180:191]:      NodeTypeConcatenate,
	_NodeTypeLowerName[180:191]: NodeTypeConcatenate,
	_NodeTypeName[191:195]:      NodeTypeConj,
	_NodeTypeLowerName[191:195]: NodeTypeConj,
	_NodeTypeName[195:203]:      NodeTypeConstant,
	_NodeTypeLowerName[195:203]: NodeTypeConstant,
	_NodeTypeName[203:221]:      NodeTypeConvGeneralDilated,
	_NodeTypeLowerName[203:221]: NodeTypeConvGeneralDilated,
	_NodeTypeName[221:233]:      NodeTypeConvertDType,
	_NodeTypeLowerName[221:233]: NodeTypeConvertDType,
	_NodeTypeName[233:236]:      NodeTypeCos,
	_NodeTypeLowerName[233:236]: NodeTypeCos,
	_NodeTypeName[236:239]:      NodeTypeDiv,
	_NodeTypeLowerName[236:239]: NodeTypeDiv,
	_NodeTypeName[239:242]:      NodeTypeDot,
	_NodeTypeLowerName[239:242]: NodeTypeDot,
	_NodeTypeName[242:252]:      NodeTypeDotGeneral,
	_NodeTypeLowerName[242:252]: NodeTypeDotGeneral,
	_NodeTypeName[252:264]:      NodeTypeDynamicSlice,
	_NodeTypeLowerName[252:264]: NodeTypeDynamicSlice,
	_NodeTypeName[264:282]:      NodeTypeDynamicUpdateSlice,
	_NodeTypeLowerName[264:282]: NodeTypeDynamicUpdateSlice,
	_NodeTypeName[282:287]:      NodeTypeEqual,
	_NodeTypeLowerName[282:287]: NodeTypeEqual,
	_NodeTypeName[287:302]:      NodeTypeEqualTotalOrder,
	_NodeTypeLowerName[287:302]: NodeTypeEqualTotalOrder,
	_NodeTypeName[302:305]:      NodeTypeErf,
	_NodeTypeLowerName[302:305]: NodeTypeErf,
	_NodeTypeName[305:308]:      NodeTypeExp,
	_NodeTypeLowerName[305:308]: NodeTypeExp,
	_NodeTypeName[308:313]:      NodeTypeExpm1,
	_NodeTypeLowerName[308:313]: NodeTypeExpm1,
	_NodeTypeName[313:316]:      NodeTypeFFT,
	_NodeTypeLowerName[313:316]: NodeTypeFFT,
	_NodeTypeName[316:321]:      NodeTypeFloor,
	_NodeTypeLowerName[316:321]: NodeTypeFloor,
	_NodeTypeName[321:327]:      NodeTypeGather,
	_NodeTypeLowerName[321:327]: NodeTypeGather,
	_NodeTypeName[327:341]:      NodeTypeGreaterOrEqual,
	_NodeTypeLowerName[327:341]: NodeTypeGreaterOrEqual,
	_NodeTypeName[341:365]:      NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeLowerName[341:365]: NodeTypeGreaterOrEqualTotalOrder,
	_NodeTypeName[365:376]:      NodeTypeGreaterThan,
	_NodeTypeLowerName[365:376]: NodeTypeGreaterThan,
	_NodeTypeName[376:397]:      NodeTypeGreaterThanTotalOrder,
	_NodeTypeLowerName[376:397]: NodeTypeGreaterThanTotalOrder,
	_NodeTypeName[397:405]:      NodeTypeIdentity,
	_NodeTypeLowerName[397:405]: NodeTypeIdentity,
	_NodeTypeName[405:409]:      NodeTypeImag,
	_NodeTypeLowerName[405:409]: NodeTypeImag,
	_NodeTypeName[409:413]:      NodeTypeIota,
	_NodeTypeLowerName[409:413]: NodeTypeIota,
	_NodeTypeName[413:421]:      NodeTypeIsFinite,
	_NodeTypeLowerName[413:421]: NodeTypeIsFinite,
	_NodeTypeName[421:432]:      NodeTypeLessOrEqual,
	_NodeTypeLowerName[421:432]: NodeTypeLessOrEqual,
	_NodeTypeName[432:453]:      NodeTypeLessOrEqualTotalOrder,
	_NodeTypeLowerName[432:453]: NodeTypeLessOrEqualTotalOrder,
	_NodeTypeName[453:461]:      NodeTypeLessThan,
	_NodeTypeLowerName[453:461]: NodeTypeLessThan,
	_NodeTypeName[461:479]:      NodeTypeLessThanTotalOrder,
	_NodeTypeLowerName[461:479]: NodeTypeLessThanTotalOrder,
	_NodeTypeName[479:482]:      NodeTypeLog,
	_NodeTypeLowerName[479:482]: NodeTypeLog,
	_NodeTypeName[482:487]:      NodeTypeLog1p,
	_NodeTypeLowerName[482:487]: NodeTypeLog1p,
	_NodeTypeName[487:497]:      NodeTypeLogicalAnd,
	_NodeTypeLowerName[487:497]: NodeTypeLogicalAnd,
	_NodeTypeName[497:507]:      NodeTypeLogicalNot,
	_NodeTypeLowerName[497:507]: NodeTypeLogicalNot,
	_NodeTypeName[507:516]:      NodeTypeLogicalOr,
	_NodeTypeLowerName[507:516]: NodeTypeLogicalOr,
	_NodeTypeName[516:526]:      NodeTypeLogicalXor,
	_NodeTypeLowerName[516:526]: NodeTypeLogicalXor,
	_NodeTypeName[526:534]:      NodeTypeLogistic,
	_NodeTypeLowerName[526:534]: NodeTypeLogistic,
	_NodeTypeName[534:537]:      NodeTypeMax,
	_NodeTypeLowerName[534:537]: NodeTypeMax,
	_NodeTypeName[537:540]:      NodeTypeMin,
	_NodeTypeLowerName[537:540]: NodeTypeMin,
	_NodeTypeName[540:543]:      NodeTypeMul,
	_NodeTypeLowerName[540:543]: NodeTypeMul,
	_NodeTypeName[543:546]:      NodeTypeNeg,
	_NodeTypeLowerName[543:546]: NodeTypeNeg,
	_NodeTypeName[546:554]:      NodeTypeNotEqual,
	_NodeTypeLowerName[546:554]: NodeTypeNotEqual,
	_NodeTypeName[554:572]:      NodeTypeNotEqualTotalOrder,
	_NodeTypeLowerName[554:572]: NodeTypeNotEqualTotalOrder,
	_NodeTypeName[572:575]:      NodeTypePad,
	_NodeTypeLowerName[572:575]: NodeTypePad,
	_NodeTypeName[575:584]:      NodeTypeParameter,
	_NodeTypeLowerName[575:584]: NodeTypeParameter,
	_NodeTypeName[584:587]:      NodeTypePow,
	_NodeTypeLowerName[584:587]: NodeTypePow,
	_NodeTypeName[587:591]:      NodeTypeReal,
	_NodeTypeLowerName[587:591]: NodeTypeReal,
	_NodeTypeName[591:607]:      NodeTypeReduceBitwiseAnd,
	_NodeTypeLowerName[591:607]: NodeTypeReduceBitwiseAnd,
	_NodeTypeName[607:622]:      NodeTypeReduceBitwiseOr,
	_NodeTypeLowerName[607:622]: NodeTypeReduceBitwiseOr,
	_NodeTypeName[622:638]:      NodeTypeReduceBitwiseXor,
	_NodeTypeLowerName[622:638]: NodeTypeReduceBitwiseXor,
	_NodeTypeName[638:654]:      NodeTypeReduceLogicalAnd,
	_NodeTypeLowerName[638:654]: NodeTypeReduceLogicalAnd,
	_NodeTypeName[654:669]:      NodeTypeReduceLogicalOr,
	_NodeTypeLowerName[654:669]: NodeTypeReduceLogicalOr,
	_NodeTypeName[669:685]:      NodeTypeReduceLogicalXor,
	_NodeTypeLowerName[669:685]: NodeTypeReduceLogicalXor,
	_NodeTypeName[685:694]:      NodeTypeReduceMax,
	_NodeTypeLowerName[685:694]: NodeTypeReduceMax,
	_NodeTypeName[694:703]:      NodeTypeReduceMin,
	_NodeTypeLowerName[694:703]: NodeTypeReduceMin,
	_NodeTypeName[703:716]:      NodeTypeReduceProduct,
	_NodeTypeLowerName[703:716]: NodeTypeReduceProduct,
	_NodeTypeName[716:725]:      NodeTypeReduceSum,
	_NodeTypeLowerName[716:725]: NodeTypeReduceSum,
	_NodeTypeName[725:737]:      NodeTypeReduceWindow,
	_NodeTypeLowerName[725:737]: NodeTypeReduceWindow,
	_NodeTypeName[737:740]:      NodeTypeRem,
	_NodeTypeLowerName[737:740]: NodeTypeRem,
	_NodeTypeName[740:747]:      NodeTypeReshape,
	_NodeTypeLowerName[740:747]: NodeTypeReshape,
	_NodeTypeName[747:754]:      NodeTypeReverse,
	_NodeTypeLowerName[747:754]: NodeTypeReverse,
	_NodeTypeName[754:769]:      NodeTypeRngBitGenerator,
	_NodeTypeLowerName[754:769]: NodeTypeRngBitGenerator,
	_NodeTypeName[769:774]:      NodeTypeRound,
	_NodeTypeLowerName[769:774]: NodeTypeRound,
	_NodeTypeName[774:779]:      NodeTypeRsqrt,
	_NodeTypeLowerName[774:779]: NodeTypeRsqrt,
	_NodeTypeName[779:789]:      NodeTypeScatterAdd,
	_NodeTypeLowerName[779:789]: NodeTypeScatterAdd,
	_NodeTypeName[789:799]:      NodeTypeScatterMax,
	_NodeTypeLowerName[789:799]: NodeTypeScatterMax,
	_NodeTypeName[799:809]:      NodeTypeScatterMin,
	_NodeTypeLowerName[799:809]: NodeTypeScatterMin,
	_NodeTypeName[809:828]:      NodeTypeSelectAndScatterMax,
	_NodeTypeLowerName[809:828]: NodeTypeSelectAndScatterMax,
	_NodeTypeName[828:847]:      NodeTypeSelectAndScatterMin,
	_NodeTypeLowerName[828:847]: NodeTypeSelectAndScatterMin,
	_NodeTypeName[847:866]:      NodeTypeSelectAndScatterSum,
	_NodeTypeLowerName[847:866]: NodeTypeSelectAndScatterSum,
	_NodeTypeName[866:875]:      NodeTypeShiftLeft,
	_NodeTypeLowerName[866:875]: NodeTypeShiftLeft,
	_NodeTypeName[875:895]:      NodeTypeShiftRightArithmetic,
	_NodeTypeLowerName[875:895]: NodeTypeShiftRightArithmetic,
	_NodeTypeName[895:912]:      NodeTypeShiftRightLogical,
	_NodeTypeLowerName[895:912]: NodeTypeShiftRightLogical,
	_NodeTypeName[912:916]:      NodeTypeSign,
	_NodeTypeLowerName[912:916]: NodeTypeSign,
	_NodeTypeName[916:919]:      NodeTypeSin,
	_NodeTypeLowerName[916:919]: NodeTypeSin,
	_NodeTypeName[919:924]:      NodeTypeSlice,
	_NodeTypeLowerName[919:924]: NodeTypeSlice,
	_NodeTypeName[924:928]:      NodeTypeSqrt,
	_NodeTypeLowerName[924:928]: NodeTypeSqrt,
	_NodeTypeName[928:931]:      NodeTypeSub,
	_NodeTypeLowerName[928:931]: NodeTypeSub,
	_NodeTypeName[931:935]:      NodeTypeTanh,
	_NodeTypeLowerName[931:935]: NodeTypeTanh,
	_NodeTypeName[935:944]:      NodeTypeTranspose,
	_NodeTypeLowerName[935:944]: NodeTypeTranspose,
	_NodeTypeName[944:949]:      NodeTypeWhere,
	_NodeTypeLowerName[944:949]: NodeTypeWhere,
}

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:16],
	_NodeTypeName[16:19],
	_NodeTypeName[19:22],
	_NodeTypeName[22:31],
	_NodeTypeName[31:52],
	_NodeTypeName[52:72],
	_NodeTypeName[72:89],
	_NodeTypeName[89:97],
	_NodeTypeName[97:104],
	_NodeTypeName[104:114],
	_NodeTypeName[114:124],
	_NodeTypeName[124:133],
	_NodeTypeName[133:143],
	_NodeTypeName[143:152],
	_NodeTypeName[152:166],
	_NodeTypeName[166:170],
	_NodeTypeName[170:173],
	_NodeTypeName[173:180],
	_NodeTypeName[180:191],
	_NodeTypeName[191:195],
	_NodeTypeName[195:203],
	_NodeTypeName[203:221],
	_NodeTypeName[221:233],
	_NodeTypeName[233:236],
	_NodeTypeName[236:239],
	_NodeTypeName[239:242],
	_NodeTypeName[242:252],
	_NodeTypeName[252:264],
	_NodeTypeName[264:282],
	_NodeTypeName[282:287],
	_NodeTypeName[287:302],
	_NodeTypeName[302:305],
	_NodeTypeName[305:308],
	_NodeTypeName[308:313],
	_NodeTypeName[313:316],
	_NodeTypeName[316:321],
	_NodeTypeName[321:327],
	_NodeTypeName[327:341],
	_NodeTypeName[341:365],
	_NodeTypeName[365:376],
	_NodeTypeName[376:397],
	_NodeTypeName[397:405],
	_NodeTypeName[405:409],
	_NodeTypeName[409:413],
	_NodeTypeName[413:421],
	_NodeTypeName[421:432],
	_NodeTypeName[432:453],
	_NodeTypeName[453:461],
	_NodeTypeName[461:479],
	_NodeTypeName[479:482],
	_NodeTypeName[482:487],
	_NodeTypeName[487:497],
	_NodeTypeName[497:507],
	_NodeTypeName[507:516],
	_NodeTypeName[516:526],
	_NodeTypeName[526:534],
	_NodeTypeName[534:537],
	_NodeTypeName[537:540],
	_NodeTypeName[540:543],
	_NodeTypeName[543:546],
	_NodeTypeName[546:554],
	_NodeTypeName[554:572],
	_NodeTypeName[572:575],
	_NodeTypeName[575:584],
	_NodeTypeName[584:587],
	_NodeTypeName[587:591],
	_NodeTypeName[591:607],
	_NodeTypeName[607:622],
	_NodeTypeName[622:638],
	_NodeTypeName[638:654],
	_NodeTypeName[654:669],
	_NodeTypeName[669:685],
	_NodeTypeName[685:694],
	_NodeTypeName[694:703],
	_NodeTypeName[703:716],
	_NodeTypeName[716:725],
	_NodeTypeName[725:737],
	_NodeTypeName[737:740],
	_NodeTypeName[740:747],
	_NodeTypeName[747:754],
	_NodeTypeName[754:769],
	_NodeTypeName[769:774],
	_NodeTypeName[774:779],
	_NodeTypeName[779:789],
	_NodeTypeName[789:799],
	_NodeTypeName[799:809],
	_NodeTypeName[809:828],
	_NodeTypeName[828:847],
	_NodeTypeName[847:866],
	_NodeTypeName[866:875],
	_NodeTypeName[875:895],
	_NodeTypeName[895:912],
	_NodeTypeName[912:916],
	_NodeTypeName[916:919],
	_NodeTypeName[919:924],
	_NodeTypeName[924:928],
	_NodeTypeName[928:931],
	_NodeTypeName[931:935],
	_NodeTypeName[935:944],
	_NodeTypeName[944:949],
}

// NodeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeTypeString(s string) (NodeType, error) {
	if val, ok := _NodeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeType values", s)
}

// NodeTypeValues returns all values of the enum
func NodeTypeValues() []NodeType {
	return _NodeTypeValues
}

// NodeTypeStrings returns a slice of all String values of the enum
func NodeTypeStrings() []string {
	strs := make([]string, len(_NodeTypeNames))
	copy(strs, _NodeTypeNames)
	return strs
}

// IsANodeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeType) IsANodeType() bool {
	for _, v := range _NodeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeType
func (i NodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeType
func (i *NodeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeType should be a string, got %s", data)
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NodeType
func (i NodeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NodeType
func (i *NodeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = NodeTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeType
func (i NodeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeType
func (i *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeTypeString(s)
	return err
}
